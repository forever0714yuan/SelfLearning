// 1.属性值变量
// 变量以 @ 开头
@width: 10px;
@height: @width + 10px;

#header {
  width: @width;
  height: @height;
}
// Variables
@link-color: #428bca; // sea blue
// q:darken 什么意思？
// a:darken 是一个函数，用来改变颜色的亮度，这里是把 @link-color 变量的亮度降低 10%
@link-color-hover: darken(@link-color, 10%);

// 2.选择器变量
// 选择器变量以 @ 开头，后面跟上选择器的名字，选择器变量可以用来代替任何选择器
// 定义
@my-selector: banner;

// 使用
.@{my-selector} {
  font-size: 12px;
  height: 24px;
  color: #1e1d1f;
}

//3.属性变量
@property: color;

.widget {
  @{property}: #0ee;
  background-@{property}: #999;
}

// 4.url变量

@images: "../img";

// 使用

body {
  color: #1e1d1f;
  background: url("@{images}/bg.jpg");
}

// 5.导入变量
@themes: "../../src/themes";

// @import "@{themes}/tidal-wave.less";

// 6.变量变量
// 通俗解释，就是可以使用一个变量定义变量的名称
@primary: green;
@secondary: blue;

.section {
  @color: primary;

  .element {
    color: @@color;
  }
}

// 7.惰性求值
// 7.1 变量在使用之前不必声明
.lazy-eval {
  width: @a;
}

@a: 9%;
// 7.2 当定义一个变量两次时，使用变量的最后一个定义，从当前范围向上搜索。这类似于 css 本身，其中定义中的最后一个属性用于确定值。
@var: 0;

.class {
  @var: 1;
  .brass {
    @var: 2;
    three: @var;
    @var: 3;
  }
  one: @var;
}
// 8. 属性作为变量
// 您可以使用语法 $prop 轻松地将属性视为变量。并且Less会将当前/父范围内的最后一个属性作为“最终”值。
.widget {
  color: #efefef;
  background-color: $color;
  color: blue;
}
// 9.默认变量，后面的变量会覆盖前面的变量
